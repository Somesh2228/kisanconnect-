// JavaScript for Kisan Circle Interactive Features

// Wait for DOM to load
document.addEventListener('DOMContentLoaded', function() {
    
    // Mobile Navigation Toggle
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    
    hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('active');
    });

    // Close mobile menu when clicking on a link
    document.querySelectorAll('.nav-link').forEach(n => n.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
    }));

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const offsetTop = target.offsetTop - 80; // Account for fixed header
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Active navigation link highlighting
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');

    window.addEventListener('scroll', () => {
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (window.pageYOffset >= (sectionTop - 150)) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href').slice(1) === current) {
                link.classList.add('active');
            }
        });
    });

    // Language Selector
    const languageSelect = document.getElementById('languageSelect');
    if (languageSelect) {
        languageSelect.addEventListener('change', function() {
            const selectedLanguage = this.value;
            changeLanguage(selectedLanguage);
            // Store preference in localStorage
            localStorage.setItem('preferredLanguage', selectedLanguage);
        });

        // Load saved language preference
        const savedLanguage = localStorage.getItem('preferredLanguage');
        if (savedLanguage) {
            languageSelect.value = savedLanguage;
            changeLanguage(savedLanguage);
        }
    }

    // Community Form Handling
    const communityForm = document.getElementById('communityForm');
    communityForm.addEventListener('submit', function(e) {
        e.preventDefault();
        handleCommunityFormSubmission(this);
    });

    // Contact Form Handling
    const contactForm = document.querySelector('.contact-form');
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        handleContactFormSubmission(this);
    });

    // Feature Buttons
    setupFeatureButtons();

    // Scheme Buttons
    setupSchemeButtons();

    // Expert Buttons
    setupExpertButtons();

    // Hero Buttons
    setupHeroButtons();

    // Animated Counter for Stats
    animateCounters();

    // Intersection Observer for animations
    setupScrollAnimations();

    // Add typing effect to hero title
    addTypingEffect();
    
    // Initialize social platform features
    initializeSocialPlatform();
    
    // Initialize messaging if on messages section
    if (window.location.hash === '#messages' || document.getElementById('conversationsList')) {
        initializeMessaging();
    }
});

// Comprehensive Language Translation System
const translations = {
    'en': {
        // Navigation
        'site-name': 'Kisan Circle',
        'nav-home': 'Home',
        'nav-features': 'Features',
        'nav-community': 'Community',
        'nav-schemes': 'Schemes',
        'nav-experts': 'Experts',
        'nav-contact': 'Contact',
        
        // Hero Section
        'hero-title': 'Welcome to Kisan Circle',
        'hero-subtitle': 'Connecting Farmers, Research, and Government in India\'s Digital Agriculture Ecosystem',
        'join-community': 'Join Community',
        'explore-features': 'Explore Features',
        
        // Vision Section
        'vision-title': 'Our Vision',
        'vision-description': 'Kisan Circle connects farmers, government agriculture authorities, and research institutions in a collaborative ecosystem. The platform empowers every Indian farmer with easy access to relevant information, actionable expert advice, and a supportive digital community‚Äîbridging the gap between research, policy, and rural life in the most accessible way possible.',
        
        // Features Section
        'features-title': 'Core Features',
        'farmer-hub-title': 'üåæ Farmer Community Hub',
        'farmer-hub-experience': 'Experience Sharing: Create posts with images and videos detailing farm practices',
        'farmer-hub-qa': 'Interactive Q&A: Ask questions and engage with the farming community',
        'farmer-hub-rating': 'Peer Rating System: Rate advice for practical value',
        'farmer-hub-solving': 'Real-time Problem Solving: Social and immediate solutions',
        'farmer-hub-btn': 'Join Community',
        
        'expert-title': 'üèõÔ∏è Expert & Institutional Pages',
        'expert-research': 'Verified Research: Dedicated sections for recognized institutes',
        'expert-publications': 'Official Publications: Direct access to research papers',
        'expert-findings': 'Breakthrough Findings: Latest scientific discoveries',
        'expert-consultation': 'Expert Consultation: Direct access to agricultural experts',
        'expert-btn': 'View Experts',
        
        'schemes-title': 'üèõÔ∏è Government Schemes & Portal',
        'schemes-info': 'Centralized Information: User-friendly portal for schemes',
        'schemes-docs': 'Document Guidelines: Clear eligibility information',
        'schemes-regional': 'Regional Customization: Tailored instructions by region',
        'schemes-support': 'Support Programs: Comprehensive coverage',
        'schemes-btn': 'Browse Schemes',
        
        'multilingual-title': 'üåê Multilingual Accessibility',
        'multilingual-regional': 'Regional Languages: Multiple Indian languages supported',
        'multilingual-inclusive': 'Inclusive Design: No farmer left behind',
        'multilingual-context': 'Cultural Context: Adapted to regional practices',
        'multilingual-translation': 'Easy Translation: One-click language switching',
        'multilingual-btn': 'Switch Language',
        
        'notifications-title': 'üì≤ Smart Notification System',
        'notifications-weather': 'Weather Alerts: Timely weather updates',
        'notifications-market': 'Market Prices: Real-time mandi prices',
        'notifications-disease': 'Disease Outbreaks: Early warning system',
        'notifications-govt': 'Government Updates: New initiatives and policies',
        'notifications-btn': 'Enable Alerts',
        
        'privacy-title': 'üîí Privacy & Security',
        'privacy-protection': 'Data Protection: Strong privacy policies',
        'privacy-consent': 'User Consent: No data sharing without consent',
        'privacy-communication': 'Secure Communication: Protected interactions',
        'privacy-trust': 'Trust Framework: Building digital confidence',
        'privacy-btn': 'Learn More',
        
        // Community Section
        'community-title': 'Join Our Farming Community',
        'community-farmers': 'Active Farmers',
        'community-discussions': 'Daily Discussions',
        'community-solutions': 'Expert Solutions',
        'community-states': 'States Covered',
        'community-form-title': 'Share Your Farming Experience',
        'community-name-placeholder': 'Your Name',
        'community-location-placeholder': 'Location (District, State)',
        'community-crop-select': 'Select Your Crop',
        'community-crop-rice': 'Rice',
        'community-crop-wheat': 'Wheat',
        'community-crop-cotton': 'Cotton',
        'community-crop-sugarcane': 'Sugarcane',
        'community-crop-other': 'Other',
        'community-experience-placeholder': 'Share your farming experience, tips, or ask questions...',
        'community-submit': 'Share Experience',
        
        // Government Schemes Section
        'govt-schemes-title': 'Government Agriculture Schemes',
        'pm-kisan-title': 'PM-KISAN Scheme',
        'pm-kisan-desc': 'Direct income support to farmers with ‚Çπ6000 per year',
        'pm-kisan-eligibility': 'Eligibility: All land-holding farmers',
        'pm-kisan-btn': 'Apply Now',
        
        'crop-insurance-title': 'Crop Insurance Scheme',
        'crop-insurance-desc': 'Protection against crop loss due to natural calamities',
        'crop-insurance-eligibility': 'Eligibility: All farmers',
        'crop-insurance-btn': 'Learn More',
        
        'soil-health-title': 'Soil Health Card',
        'soil-health-desc': 'Free soil testing and nutrient recommendations',
        'soil-health-eligibility': 'Eligibility: All farmers',
        'soil-health-btn': 'Get Card',
        
        'kisan-credit-title': 'Kisan Credit Card',
        'kisan-credit-desc': 'Easy credit access for agricultural needs',
        'kisan-credit-eligibility': 'Eligibility: Land-owning farmers',
        'kisan-credit-btn': 'Apply',
        
        // Experts Section
        'experts-title': 'Agricultural Experts & Institutions',
        'expert-dr-rajesh': 'Dr. Rajesh Kumar',
        'expert-soil-science': 'Soil Science Expert',
        'expert-icar': 'ICAR - Indian Agricultural Research Institute',
        'expert-dr-priya': 'Dr. Priya Sharma',
        'expert-crop-protection': 'Crop Protection Specialist',
        'expert-punjab': 'Punjab Agricultural University',
        'expert-dr-arun': 'Dr. Arun Patel',
        'expert-horticulture': 'Horticulture Expert',
        'expert-horticultural': 'Indian Institute of Horticultural Research',
        'expert-consult-btn': 'Consult',
        
        // Technology Stack
        'tech-stack-title': 'Technology Stack',
        'tech-frontend': 'Frontend',
        'tech-backend': 'Backend',
        'tech-database': 'Database',
        
        // Contact Section
        'contact-title': 'Contact Us',
        'contact-get-in-touch': 'Get in Touch',
        'contact-name-placeholder': 'Your Name',
        'contact-email-placeholder': 'Your Email',
        'contact-subject-placeholder': 'Subject',
        'contact-message-placeholder': 'Your Message',
        'contact-send-btn': 'Send Message',
        
        // Footer
        'footer-tagline': 'Empowering Indian Agriculture Through Digital Innovation',
        'footer-quick-links': 'Quick Links',
        'footer-support': 'Support',
        'footer-community': 'Community',
        'footer-documentation': 'Documentation',
        'footer-privacy': 'Privacy Policy',
        'footer-terms': 'Terms of Service',
        'footer-github': 'GitHub',
        'footer-discussions': 'Discussions',
        'footer-contributing': 'Contributing',
        'footer-support-link': 'Support',
        'footer-copyright': '¬© 2024 Kisan Circle. Licensed under MIT License.',
        
        // Social Platform Features
        'login': 'Login',
        'signup': 'Sign Up',
        'login-title': 'Login to Kisan Circle',
        'signup-title': 'Join Kisan Circle',
        'phone-email': 'Phone Number or Email',
        'password': 'Password',
        'login-btn': 'Login',
        'signup-btn': 'Sign Up',
        'no-account': 'Don\'t have an account?',
        'have-account': 'Already have an account?',
        'full-name': 'Full Name',
        'phone-number': 'Phone Number',
        'email': 'Email',
        'location': 'Location (District, State)',
        'farming-experience': 'Farming Experience',
        'primary-crops': 'Primary Crops',
        'my-profile': 'My Profile',
        'my-posts': 'My Posts',
        'settings': 'Settings',
        'logout': 'Logout',
        'nav-feed': 'Community Feed',
        'nav-trending': 'Trending',
        'nav-messages': 'Messages',
        'community-feed-title': 'Community Feed',
        'share-experience': 'Share Your Experience',
        'create-post-title': 'Share Your Farming Experience',
        'post-title': 'Title',
        'post-description': 'Description',
        'post-category': 'Category',
        'add-media': 'Add Photos or Videos',
        'drag-drop': 'Drag and drop files here or click to browse',
        'cancel': 'Cancel',
        'post-submit': 'Share Post',
        'trending-title': 'Trending in Agriculture',
        'all': 'All',
        'crop-tips': 'Crop Tips',
        'pest-control': 'Pest Control',
        'success-stories': 'Success Stories',
        'questions': 'Questions',
        'messages-title': 'Messages',
        'new-message': 'New Message',
        'new-message-title': 'Start New Conversation',
        'select-conversation': 'Select a conversation to start messaging',
        'message': 'Message',
        'view-profile': 'View Profile',
        'help-center': 'Help Center',
        'community-guidelines': 'Community Guidelines',
        'feedback': 'Feedback'
    },
    
    'hi': {
        // Navigation
        'site-name': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤',
        'nav-home': '‡§π‡•ã‡§Æ',
        'nav-features': '‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç',
        'nav-community': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø',
        'nav-schemes': '‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
        'nav-experts': '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
        'nav-contact': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï',
        
        // Hero Section
        'hero-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
        'hero-subtitle': '‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•É‡§∑‡§ø ‡§™‡§æ‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§ï‡•Ä ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡§æ‡§®, ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§î‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§®‡§æ',
        'join-community': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç',
        'explore-features': '‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç',
        
        // Vision Section
        'vision-title': '‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø',
        'vision-description': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç, ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§™‡§æ‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§ï‡•Ä ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§π‡§∞ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä, ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡§æ‡§π ‡§î‡§∞ ‡§è‡§ï ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§§‡§ï ‡§Ü‡§∏‡§æ‡§® ‡§™‡§π‡•Å‡§Ç‡§ö ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§',
        
        // Features Section
        'features-title': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç',
        'farmer-hub-title': 'üåæ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
        'farmer-hub-experience': '‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ‡§ï‡§∞‡§£: ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•ã‡§∏‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç',
        'farmer-hub-qa': '‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞: ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á‡§Ç',
        'farmer-hub-rating': '‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§∞‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ: ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≤‡§æ‡§π ‡§ï‡•ã ‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
        'farmer-hub-solving': '‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§î‡§∞ ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®',
        'farmer-hub-btn': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç',
        
        'expert-title': 'üèõÔ∏è ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§î‡§∞ ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ó‡§§ ‡§™‡•É‡§∑‡•ç‡§†',
        'expert-research': '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§®: ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó',
        'expert-publications': '‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§®: ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§™‡§§‡•ç‡§∞‡•ã‡§Ç ‡§§‡§ï ‡§∏‡•Ä‡§ß‡•Ä ‡§™‡§π‡•Å‡§Ç‡§ö',
        'expert-findings': '‡§®‡§µ‡•Ä‡§® ‡§ñ‡•ã‡§ú‡•á‡§Ç: ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§ñ‡•ã‡§ú‡•á‡§Ç',
        'expert-consultation': '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂: ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•ã‡§Ç ‡§§‡§ï ‡§∏‡•Ä‡§ß‡•Ä ‡§™‡§π‡•Å‡§Ç‡§ö',
        'expert-btn': '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§¶‡•á‡§ñ‡•á‡§Ç',
        
        'schemes-title': 'üèõÔ∏è ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤',
        'schemes-info': '‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡•Ä‡§ï‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä: ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ-‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤',
        'schemes-docs': '‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂: ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
        'schemes-regional': '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®: ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂',
        'schemes-support': '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ: ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§ï‡§µ‡§∞‡•á‡§ú',
        'schemes-btn': '‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç',
        
        'multilingual-title': 'üåê ‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§™‡§π‡•Å‡§Ç‡§ö',
        'multilingual-regional': '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç: ‡§ï‡§à ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®',
        'multilingual-inclusive': '‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂‡•Ä ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®: ‡§ï‡•ã‡§à ‡§ï‡§ø‡§∏‡§æ‡§® ‡§™‡•Ä‡§õ‡•á ‡§® ‡§õ‡•Ç‡§ü‡•á',
        'multilingual-context': '‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠: ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤',
        'multilingual-translation': '‡§Ü‡§∏‡§æ‡§® ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶: ‡§è‡§ï-‡§ï‡•ç‡§≤‡§ø‡§ï ‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ',
        'multilingual-btn': '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç',
        
        'notifications-title': 'üì≤ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ',
        'notifications-weather': '‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§≤‡§∞‡•ç‡§ü: ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü',
        'notifications-market': '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ: ‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ',
        'notifications-disease': '‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§ï‡•ã‡§™: ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä',
        'notifications-govt': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü: ‡§®‡§à ‡§™‡§π‡§≤ ‡§î‡§∞ ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç',
        'notifications-btn': '‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç',
        
        'privacy-title': 'üîí ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
        'privacy-protection': '‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ: ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç',
        'privacy-consent': '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§∏‡§π‡§Æ‡§§‡§ø: ‡§∏‡§π‡§Æ‡§§‡§ø ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ ‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§∏‡§æ‡§ù‡§æ‡§ï‡§∞‡§£ ‡§®‡§π‡•Ä‡§Ç',
        'privacy-communication': '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡§Ç‡§ö‡§æ‡§∞: ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§',
        'privacy-trust': '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§¢‡§æ‡§Ç‡§ö‡§æ: ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£',
        'privacy-btn': '‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç',
        
        // Community Section
        'community-title': '‡§π‡§Æ‡§æ‡§∞‡•á ‡§ï‡•É‡§∑‡§ø ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç',
        'community-farmers': '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®',
        'community-discussions': '‡§¶‡•à‡§®‡§ø‡§ï ‡§ö‡§∞‡•ç‡§ö‡§æ',
        'community-solutions': '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®',
        'community-states': '‡§ï‡§µ‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è ‡§∞‡§æ‡§ú‡•ç‡§Ø',
        'community-form-title': '‡§Ö‡§™‡§®‡§æ ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
        'community-name-placeholder': '‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ',
        'community-location-placeholder': '‡§∏‡•ç‡§•‡§æ‡§® (‡§ú‡§ø‡§≤‡§æ, ‡§∞‡§æ‡§ú‡•ç‡§Ø)',
        'community-crop-select': '‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç',
        'community-crop-rice': '‡§ö‡§æ‡§µ‡§≤',
        'community-crop-wheat': '‡§ó‡•á‡§π‡•Ç‡§Ç',
        'community-crop-cotton': '‡§ï‡§™‡§æ‡§∏',
        'community-crop-sugarcane': '‡§ó‡§®‡•ç‡§®‡§æ',
        'community-crop-other': '‡§Ö‡§®‡•ç‡§Ø',
        'community-experience-placeholder': '‡§Ö‡§™‡§®‡§æ ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§®‡•Å‡§≠‡§µ, ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç...',
        'community-submit': '‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
        
        // Government Schemes Section
        'govt-schemes-title': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
        'pm-kisan-title': '‡§™‡•Ä‡§è‡§Æ-‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ',
        'pm-kisan-desc': '‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‚Çπ6000 ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Ä‡§ß‡•Ä ‡§Ü‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
        'pm-kisan-eligibility': '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ: ‡§∏‡§≠‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ß‡§æ‡§∞‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®',
        'pm-kisan-btn': '‡§Ö‡§≠‡•Ä ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç',
        
        'crop-insurance-title': '‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ',
        'crop-insurance-desc': '‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§Ü‡§™‡§¶‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§´‡§∏‡§≤ ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§ï‡•á ‡§ñ‡§ø‡§≤‡§æ‡§´ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
        'crop-insurance-eligibility': '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ: ‡§∏‡§≠‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®',
        'crop-insurance-btn': '‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç',
        
        'soil-health-title': '‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§°',
        'soil-health-desc': '‡§Æ‡•Å‡§´‡•ç‡§§ ‡§Æ‡•É‡§¶‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç',
        'soil-health-eligibility': '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ: ‡§∏‡§≠‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®',
        'soil-health-btn': '‡§ï‡§æ‡§∞‡•ç‡§° ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç',
        
        'kisan-credit-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§°',
        'kisan-credit-desc': '‡§ï‡•É‡§∑‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§™‡§π‡•Å‡§Ç‡§ö',
        'kisan-credit-eligibility': '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ: ‡§≠‡•Ç‡§Æ‡§ø‡§ß‡§æ‡§∞‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®',
        'kisan-credit-btn': '‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç',
        
        // Experts Section
        'experts-title': '‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§î‡§∞ ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§®',
        'expert-dr-rajesh': '‡§°‡•â. ‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
        'expert-soil-science': '‡§Æ‡•É‡§¶‡§æ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
        'expert-icar': 'ICAR - ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§®',
        'expert-dr-priya': '‡§°‡•â. ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
        'expert-crop-protection': '‡§´‡§∏‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
        'expert-punjab': '‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•ç‡§µ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§≤‡§Ø',
        'expert-dr-arun': '‡§°‡•â. ‡§Ö‡§∞‡•Å‡§£ ‡§™‡§ü‡•á‡§≤',
        'expert-horticulture': '‡§¨‡§æ‡§ó‡§µ‡§æ‡§®‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
        'expert-horticultural': '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§¨‡§æ‡§ó‡§µ‡§æ‡§®‡•Ä ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§®',
        'expert-consult-btn': '‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç',
        
        // Technology Stack
        'tech-stack-title': '‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä ‡§∏‡•ç‡§ü‡•à‡§ï',
        'tech-frontend': '‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§°',
        'tech-backend': '‡§¨‡•à‡§ï‡§è‡§Ç‡§°',
        'tech-database': '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏',
        
        // Contact Section
        'contact-title': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç',
        'contact-get-in-touch': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§Æ‡•á‡§Ç ‡§∞‡§π‡•á‡§Ç',
        'contact-name-placeholder': '‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ',
        'contact-email-placeholder': '‡§Ü‡§™‡§ï‡§æ ‡§à‡§Æ‡•á‡§≤',
        'contact-subject-placeholder': '‡§µ‡§ø‡§∑‡§Ø',
        'contact-message-placeholder': '‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂',
        'contact-send-btn': '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç',
        
        // Footer
        'footer-tagline': '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§®‡§µ‡§æ‡§ö‡§æ‡§∞ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ',
        'footer-quick-links': '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï',
        'footer-support': '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
        'footer-community': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø',
        'footer-documentation': '‡§™‡•ç‡§∞‡§≤‡•á‡§ñ‡§®',
        'footer-privacy': '‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø',
        'footer-terms': '‡§∏‡•á‡§µ‡§æ ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç',
        'footer-github': 'GitHub',
        'footer-discussions': '‡§ö‡§∞‡•ç‡§ö‡§æ',
        'footer-contributing': '‡§Ø‡•ã‡§ó‡§¶‡§æ‡§®',
        'footer-support-link': '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
        'footer-copyright': '¬© 2024 ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤‡•§ MIT ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•á ‡§§‡§π‡§§ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§‡•§',
        
        // Social Platform Features
        'login': '‡§≤‡•â‡§ó‡§ø‡§®',
        'signup': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™',
        'login-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç',
        'signup-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç',
        'phone-email': '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§Ø‡§æ ‡§à‡§Æ‡•á‡§≤',
        'password': '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
        'login-btn': '‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç',
        'signup-btn': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç',
        'no-account': '‡§ï‡•ã‡§à ‡§ñ‡§æ‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à?',
        'have-account': '‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à?',
        'full-name': '‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ',
        'phone-number': '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞',
        'email': '‡§à‡§Æ‡•á‡§≤',
        'location': '‡§∏‡•ç‡§•‡§æ‡§® (‡§ú‡§ø‡§≤‡§æ, ‡§∞‡§æ‡§ú‡•ç‡§Ø)',
        'farming-experience': '‡§ñ‡•á‡§§‡•Ä ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ',
        'primary-crops': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç',
        'my-profile': '‡§Æ‡•á‡§∞‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤',
        'my-posts': '‡§Æ‡•á‡§∞‡•á ‡§™‡•ã‡§∏‡•ç‡§ü',
        'settings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
        'logout': '‡§≤‡•â‡§ó‡§Ü‡§â‡§ü',
        'nav-feed': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§´‡•Ä‡§°',
        'nav-trending': '‡§ü‡•ç‡§∞‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó',
        'nav-messages': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'community-feed-title': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§´‡•Ä‡§°',
        'share-experience': '‡§Ö‡§™‡§®‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
        'create-post-title': '‡§Ö‡§™‡§®‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
        'post-title': '‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï',
        'post-description': '‡§µ‡§ø‡§µ‡§∞‡§£',
        'post-category': '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä',
        'add-media': '‡§´‡•ã‡§ü‡•ã ‡§Ø‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ú‡•ã‡§°‡§º‡•á‡§Ç',
        'drag-drop': '‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§ñ‡•Ä‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§õ‡•ã‡§°‡§º‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç',
        'cancel': '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
        'post-submit': '‡§™‡•ã‡§∏‡•ç‡§ü ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
        'trending-title': '‡§ï‡•É‡§∑‡§ø ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó',
        'all': '‡§∏‡§≠‡•Ä',
        'crop-tips': '‡§´‡§∏‡§≤ ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏',
        'pest-control': '‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£',
        'success-stories': '‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡§ø‡§Ø‡§æ‡§Å',
        'questions': '‡§™‡•ç‡§∞‡§∂‡•ç‡§®',
        'messages-title': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'new-message': '‡§®‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂',
        'new-message-title': '‡§®‡§à ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
        'select-conversation': '‡§Æ‡•à‡§∏‡•á‡§ú‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ö‡•Å‡§®‡•á‡§Ç',
        'message': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'view-profile': '‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§¶‡•á‡§ñ‡•á‡§Ç',
        'help-center': '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
        'community-guidelines': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂',
        'feedback': '‡§´‡•Ä‡§°‡§¨‡•à‡§ï'
    },
    
    'mr': {
        // Navigation
        'site-name': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤',
        'nav-home': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø',
        'nav-features': '‡§µ‡•à‡§∂‡§ø‡§∑‡•ç‡§ü‡•ç‡§Ø‡•á',
        'nav-community': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø',
        'nav-schemes': '‡§Ø‡•ã‡§ú‡§®‡§æ',
        'nav-experts': '‡§§‡§ú‡•ç‡§ú‡•ç‡§û',
        'nav-contact': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï',
        
        // Hero Section
        'hero-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§™‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á',
        'hero-subtitle': '‡§≠‡§æ‡§∞‡§§‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•É‡§∑‡•Ä ‡§™‡§∞‡§ø‡§∏‡§Ç‡§∏‡•ç‡§•‡•á‡§§ ‡§∂‡•á‡§§‡§ï‡§∞‡•Ä, ‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§Ü‡§£‡§ø ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§Ø‡§æ‡§Ç‡§®‡§æ ‡§ú‡•ã‡§°‡§£‡•á',
        'join-community': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§æ‡§§ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ',
        'explore-features': '‡§µ‡•à‡§∂‡§ø‡§∑‡•ç‡§ü‡•ç‡§Ø‡§æ‡§Ç‡§ö‡§æ ‡§∂‡•ã‡§ß ‡§ò‡•ç‡§Ø‡§æ',
        
        // Vision Section
        'vision-title': '‡§Ü‡§Æ‡§ö‡•Ä ‡§¶‡•É‡§∑‡•ç‡§ü‡•Ä',
        'vision-description': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ, ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•É‡§∑‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§Ü‡§£‡§ø ‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§Ç‡§®‡§æ ‡§è‡§ï‡§æ ‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§™‡§∞‡§ø‡§∏‡§Ç‡§∏‡•ç‡§•‡•á‡§§ ‡§ú‡•ã‡§°‡§§‡•á‡•§ ‡§π‡•á ‡§™‡•ç‡§≤‡•Ö‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä, ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§§‡§ú‡•ç‡§û ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Ü‡§£‡§ø ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§æ‡§ö‡§æ ‡§∏‡§π‡§ú ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§¶‡•á‡§§‡•á.',
        
        // Add more Marathi translations...
        'features-title': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡•à‡§∂‡§ø‡§∑‡•ç‡§ü‡•ç‡§Ø‡•á',
        'community-title': '‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∂‡•á‡§§‡•Ä ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§æ‡§§ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ',
        'govt-schemes-title': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•É‡§∑‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ',
        'experts-title': '‡§ï‡•É‡§∑‡•Ä ‡§§‡§ú‡•ç‡§û ‡§Ü‡§£‡§ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ',
        'tech-stack-title': '‡§ü‡•á‡§ï‡•ç‡§®‡•ã‡§≤‡•ã‡§ú‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ï',
        'contact-title': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•ã',
        'footer-tagline': '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§®‡§µ‡•Ä‡§®‡§§‡§æ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø‡§®‡•á ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§µ‡§µ‡•Å‡§Ç',
        
        // Social Platform Features
        'login': '‡§≤‡•â‡§ó‡§á‡§®',
        'signup': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™',
        'login-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤‡§Æ‡§æ‡§Ç ‡§≤‡•â‡§ó‡§á‡§® ‡§ï‡§∞‡•ã',
        'signup-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤‡§Æ‡§æ‡§Ç ‡§ú‡•ã‡§°‡§æ‡§ì',
        'phone-email': '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§Ö‡§•‡§µ‡§æ ‡§à‡§Æ‡•á‡§≤',
        'password': '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
        'login-btn': '‡§≤‡•â‡§ó‡§á‡§® ‡§ï‡§∞‡•ã',
        'signup-btn': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§ï‡§∞‡•ã',
        'no-account': '‡§ñ‡§æ‡§§‡•Å‡§Ç ‡§®‡§•‡•Ä?',
        'have-account': '‡§™‡§π‡•á‡§≤‡•á‡§•‡•Ä ‡§ú ‡§ñ‡§æ‡§§‡•Å‡§Ç ‡§õ‡•á?',
        'full-name': '‡§™‡•Ç‡§∞‡•Å‡§Ç ‡§®‡§æ‡§Æ',
        'phone-number': '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞',
        'email': '‡§à‡§Æ‡•á‡§≤',
        'location': '‡§∏‡•ç‡§•‡§≥ (‡§ú‡§ø‡§≤‡•ç‡§≤‡•ã, ‡§∞‡§æ‡§ú‡•ç‡§Ø)',
        'farming-experience': '‡§ñ‡•á‡§§‡•Ä‡§®‡•ã ‡§Ö‡§®‡•Å‡§≠‡§µ',
        'primary-crops': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡§æ‡§ï‡•ã',
        'my-profile': '‡§Æ‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤',
        'my-posts': '‡§Æ‡§æ‡§∞‡§æ ‡§™‡•ã‡§∏‡•ç‡§ü',
        'settings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
        'logout': '‡§≤‡•â‡§ó‡§Ü‡§â‡§ü',
        'nav-feed': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§´‡•Ä‡§°',
        'nav-trending': '‡§ü‡•ç‡§∞‡•á‡§®‡•ç‡§°‡§ø‡§Ç‡§ó',
        'nav-messages': '‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã',
        'community-feed-title': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§´‡•Ä‡§°',
        'share-experience': '‡§§‡§Æ‡§æ‡§∞‡•ã ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∂‡•á‡§∞ ‡§ï‡§∞‡•ã',
        'create-post-title': '‡§§‡§Æ‡§æ‡§∞‡•ã ‡§ñ‡•á‡§§‡•Ä‡§®‡•ã ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∂‡•á‡§∞ ‡§ï‡§∞‡•ã',
        'post-title': '‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï',
        'post-description': '‡§µ‡§ø‡§µ‡§∞‡§£',
        'post-category': '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä',
        'add-media': '‡§´‡•ã‡§ü‡•ã ‡§Ö‡§•‡§µ‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§â‡§Æ‡•á‡§∞‡•ã',
        'drag-drop': '‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§Ö‡§π‡•Ä‡§Ç ‡§ñ‡•á‡§Ç‡§ö‡•ã ‡§Ö‡§®‡•á ‡§Æ‡•Ç‡§ï‡•ã ‡§Ö‡§•‡§µ‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ù ‡§ï‡§∞‡§µ‡§æ ‡§Æ‡§æ‡§ü‡•á ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•ã',
        'cancel': '‡§∞‡§¶ ‡§ï‡§∞‡•ã',
        'post-submit': '‡§™‡•ã‡§∏‡•ç‡§ü ‡§∂‡•á‡§∞ ‡§ï‡§∞‡•ã',
        'trending-title': '‡§ï‡•É‡§∑‡§ø‡§Æ‡§æ‡§Ç ‡§ü‡•ç‡§∞‡•á‡§®‡•ç‡§°‡§ø‡§Ç‡§ó',
        'all': '‡§¨‡§ß‡§æ',
        'crop-tips': '‡§™‡§æ‡§ï‡§®‡•Ä ‡§ü‡§ø‡§™‡•ç‡§∏',
        'pest-control': '‡§ú‡•Ä‡§µ‡§æ‡§§ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£',
        'success-stories': '‡§∏‡§´‡§≥‡§§‡§æ‡§®‡•Ä ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§ì',
        'questions': '‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã',
        'messages-title': '‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã',
        'new-message': '‡§®‡§µ‡•ã ‡§∏‡§Ç‡§¶‡•á‡§∂',
        'new-message-title': '‡§®‡§µ‡•Ä ‡§µ‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∂‡§∞‡•Ç ‡§ï‡§∞‡•ã',
        'select-conversation': '‡§Æ‡•á‡§∏‡•á‡§ú‡§ø‡§Ç‡§ó ‡§∂‡§∞‡•Ç ‡§ï‡§∞‡§µ‡§æ ‡§Æ‡§æ‡§ü‡•á ‡§ï‡•ã‡§à ‡§µ‡§æ‡§§‡§ö‡•Ä‡§§ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡•ã',
        'message': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'view-profile': '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§ú‡•Å‡§ì',
        'help-center': '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á‡§®‡•ç‡§¶‡•ç‡§∞',
        'community-guidelines': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§ï‡§æ',
        'feedback': '‡§™‡•ç‡§∞‡§§‡§ø‡§∏‡§æ‡§¶'
        
        // Social Platform Features
        'login': '‡§≤‡•â‡§ó‡§ø‡§®',
        'signup': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™',
        'login-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§æ',
        'signup-title': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§ï‡§≤ ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ',
        'phone-email': '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§à‡§Æ‡•á‡§≤',
        'password': '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
        'login-btn': '‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§æ',
        'signup-btn': '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§ï‡§∞‡§æ',
        'no-account': '‡§ï‡•ã‡§£‡§§‡•á ‡§ñ‡§æ‡§§‡•á ‡§®‡§æ‡§π‡•Ä?',
        'have-account': '‡§Ü‡§ß‡•Ä‡§™‡§æ‡§∏‡•Ç‡§® ‡§ñ‡§æ‡§§‡•á ‡§Ü‡§π‡•á?',
        'full-name': '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§æ‡§µ',
        'phone-number': '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞',
        'email': '‡§à‡§Æ‡•á‡§≤',
        'location': '‡§∏‡•ç‡§•‡§æ‡§® (‡§ú‡§ø‡§≤‡•ç‡§π‡§æ, ‡§∞‡§æ‡§ú‡•ç‡§Ø)',
        'farming-experience': '‡§∂‡•á‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ',
        'primary-crops': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡§ø‡§ï‡•á',
        'my-profile': '‡§Æ‡§æ‡§ù‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤',
        'my-posts': '‡§Æ‡§æ‡§ù‡•á ‡§™‡•ã‡§∏‡•ç‡§ü',
        'settings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§ú',
        'logout': '‡§≤‡•â‡§ó‡§Ü‡§â‡§ü',
        'nav-feed': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§´‡•Ä‡§°',
        'nav-trending': '‡§ü‡•ç‡§∞‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó',
        'nav-messages': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'community-feed-title': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§´‡•Ä‡§°',
        'share-experience': '‡§Ü‡§™‡§≤‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§Ç‡§ó‡§æ',
        'create-post-title': '‡§Ü‡§™‡§≤‡§æ ‡§∂‡•á‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§Æ‡§æ‡§Ø‡§ø‡§ï ‡§ï‡§∞‡§æ',
        'post-title': '‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï',
        'post-description': '‡§µ‡§∞‡•ç‡§£‡§®',
        'post-category': '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä',
        'add-media': '‡§´‡•ã‡§ü‡•ã ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§µ‡•ç‡§π‡§ø‡§°‡§ø‡§ì ‡§ú‡•ã‡§°‡§æ',
        'drag-drop': '‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§Ø‡•á‡§•‡•á ‡§ñ‡•á‡§ö‡•Ç‡§® ‡§Ü‡§£‡•Ç‡§® ‡§∏‡•ã‡§°‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ù ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ',
        'cancel': '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§æ',
        'post-submit': '‡§™‡•ã‡§∏‡•ç‡§ü ‡§∏‡§æ‡§Æ‡§æ‡§Ø‡§ø‡§ï ‡§ï‡§∞‡§æ',
        'trending-title': '‡§∂‡•á‡§§‡•Ä‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ü‡•ç‡§∞‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó',
        'all': '‡§∏‡§∞‡•ç‡§µ',
        'crop-tips': '‡§™‡§ø‡§ï‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§ü‡§ø‡§™‡•ç‡§∏',
        'pest-control': '‡§ï‡§ø‡§° ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£',
        'success-stories': '‡§Ø‡§∂‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§•‡§æ',
        'questions': '‡§™‡•ç‡§∞‡§∂‡•ç‡§®',
        'messages-title': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'new-message': '‡§®‡§µ‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂',
        'new-message-title': '‡§®‡§µ‡•Ä‡§® ‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ',
        'select-conversation': '‡§Æ‡•á‡§∏‡•á‡§ú‡§ø‡§Ç‡§ó ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§è‡§ñ‡§æ‡§¶‡§æ ‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§®‡§ø‡§µ‡§°‡§æ',
        'message': '‡§∏‡§Ç‡§¶‡•á‡§∂',
        'view-profile': '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§™‡§π‡§æ',
        'help-center': '‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
        'community-guidelines': '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï ‡§§‡§§‡•ç‡§§‡•ç‡§µ‡•á',
        'feedback': '‡§´‡•Ä‡§°‡§¨‡•Ö‡§ï'
    },
    
    'gu': {
        // Navigation
        'site-name': '‡™ï‡™ø‡™∏‡™æ‡™® ‡™∏‡™∞‡´ç‡™ï‡™≤',
        'nav-home': '‡™ò‡™∞',
        'nav-features': '‡™∏‡´Å‡™µ‡™ø‡™ß‡™æ‡™ì',
        'nav-community': '‡™∏‡™Æ‡´Å‡™¶‡™æ‡™Ø',
        'nav-schemes': '‡™Ø‡´ã‡™ú‡™®‡™æ‡™ì',
        'nav-experts': '‡™®‡™ø‡™∑‡´ç‡™£‡™æ‡™§‡´ã',
        'nav-contact': '‡™∏‡™Ç‡™™‡™∞‡´ç‡™ï',
        
        // Hero Section
        'hero-title': '‡™ï‡™ø‡™∏‡™æ‡™® ‡™∏‡™∞‡´ç‡™ï‡™≤‡™Æ‡™æ‡™Ç ‡™Ü‡™™‡™®‡´Å‡™Ç ‡™∏‡´ç‡™µ‡™æ‡™ó‡™§ ‡™õ‡´á',
        'hero-subtitle': '‡™≠‡™æ‡™∞‡™§‡™®‡´Ä ‡™°‡™ø‡™ú‡™ø‡™ü‡™≤ ‡™ï‡´É‡™∑‡™ø ‡™™‡™∞‡´ç‡™Ø‡™æ‡™µ‡™∞‡™£ ‡™µ‡´ç‡™Ø‡™µ‡™∏‡´ç‡™•‡™æ‡™Æ‡™æ‡™Ç ‡™ñ‡´á‡™°‡´Ç‡™§‡´ã, ‡™∏‡™Ç‡™∂‡´ã‡™ß‡™® ‡™Ö‡™®‡´á ‡™∏‡™∞‡™ï‡™æ‡™∞‡™®‡´á ‡™ú‡´ã‡™°‡™µ‡´Å‡™Ç',
        'join-community': '‡™∏‡™Æ‡´Å‡™¶‡™æ‡™Ø‡™Æ‡™æ‡™Ç ‡™ú‡´ã‡™°‡™æ‡™ì',
        'explore-features': '‡™∏‡´Å‡™µ‡™ø‡™ß‡™æ‡™ì‡™®‡´Å‡™Ç ‡™Ö‡™®‡´ç‡™µ‡´á‡™∑‡™£ ‡™ï‡™∞‡´ã',
        
        // Vision Section
        'vision-title': '‡™Ö‡™Æ‡™æ‡™∞‡´Ä ‡™¶‡´ç‡™∞‡™∑‡´ç‡™ü‡™ø',
        'vision-description': '‡™ï‡™ø‡™∏‡™æ‡™® ‡™∏‡™∞‡´ç‡™ï‡™≤ ‡™ñ‡´á‡™°‡´Ç‡™§‡´ã, ‡™∏‡™∞‡™ï‡™æ‡™∞‡´Ä ‡™ï‡´É‡™∑‡™ø ‡™Ö‡™ß‡™ø‡™ï‡™æ‡™∞‡´Ä‡™ì ‡™Ö‡™®‡´á ‡™∏‡™Ç‡™∂‡´ã‡™ß‡™® ‡™∏‡™Ç‡™∏‡´ç‡™•‡™æ‡™ì‡™®‡´á ‡™∏‡™π‡™Ø‡´ã‡™ó‡´Ä ‡™™‡™∞‡´ç‡™Ø‡™æ‡™µ‡™∞‡™£ ‡™µ‡´ç‡™Ø‡™µ‡™∏‡´ç‡™•‡™æ‡™Æ‡™æ‡™Ç ‡™ú‡´ã‡™°‡´á ‡™õ‡´á. ‡™Ü ‡™™‡´ç‡™≤‡´á‡™ü‡™´‡´ã‡™∞‡´ç‡™Æ ‡™¶‡™∞‡´á‡™ï ‡™≠‡™æ‡™∞‡™§‡´Ä‡™Ø ‡™ñ‡´á‡™°‡´Ç‡™§‡™®‡´á ‡™∏‡™Ç‡™¨‡™Ç‡™ß‡™ø‡™§ ‡™Æ‡™æ‡™π‡™ø‡™§‡´Ä, ‡™ï‡™æ‡™∞‡´ç‡™Ø‡™æ‡™§‡´ç‡™Æ‡™ï ‡™®‡™ø‡™∑‡´ç‡™£‡™æ‡™§ ‡™∏‡™≤‡™æ‡™π ‡™Ö‡™®‡´á ‡™∏‡™π‡™æ‡™Ø‡™ï ‡™°‡™ø‡™ú‡™ø‡™ü‡™≤ ‡™∏‡™Æ‡´Å‡™¶‡™æ‡™Ø‡™®‡´Ä ‡™∏‡™∞‡™≥ ‡™™‡™π‡´ã‡™Ç‡™ö ‡™™‡´ç‡™∞‡™¶‡™æ‡™® ‡™ï‡™∞‡´á ‡™õ‡´á.',
        
        // Add more Gujarati translations...
        'features-title': '‡™Æ‡´Å‡™ñ‡´ç‡™Ø ‡™∏‡´Å‡™µ‡™ø‡™ß‡™æ‡™ì',
        'community-title': '‡™Ö‡™Æ‡™æ‡™∞‡™æ ‡™ï‡´É‡™∑‡™ø ‡™∏‡™Æ‡´Å‡™¶‡™æ‡™Ø‡™Æ‡™æ‡™Ç ‡™ú‡´ã‡™°‡™æ‡™ì',
        'govt-schemes-title': '‡™∏‡™∞‡™ï‡™æ‡™∞‡´Ä ‡™ï‡´É‡™∑‡™ø ‡™Ø‡´ã‡™ú‡™®‡™æ‡™ì',
        'experts-title': '‡™ï‡´É‡™∑‡™ø ‡™®‡™ø‡™∑‡´ç‡™£‡™æ‡™§‡´ã ‡™Ö‡™®‡´á ‡™∏‡™Ç‡™∏‡´ç‡™•‡™æ‡™ì',
        'tech-stack-title': '‡™ü‡´á‡™ï‡´ç‡™®‡´ã‡™≤‡´ã‡™ú‡´Ä ‡™∏‡´ç‡™ü‡´á‡™ï',
        'contact-title': '‡™∏‡™Ç‡™™‡™∞‡´ç‡™ï ‡™ï‡™∞‡´ã',
        'footer-tagline': '‡™°‡™ø‡™ú‡™ø‡™ü‡™≤ ‡™®‡™µ‡´Ä‡™®‡™§‡™æ ‡™¶‡´ç‡™µ‡™æ‡™∞‡™æ ‡™≠‡™æ‡™∞‡™§‡´Ä‡™Ø ‡™ï‡´É‡™∑‡™ø‡™®‡´á ‡™∏‡™∂‡™ï‡´ç‡™§ ‡™¨‡™®‡™æ‡™µ‡™µ‡´Å‡™Ç'
    }
};

function changeLanguage(language) {
    if (translations[language]) {
        // Update all elements with data-translate attributes
        Object.keys(translations[language]).forEach(key => {
            const elements = document.querySelectorAll(`[data-translate="${key}"]`);
            elements.forEach(element => {
                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.placeholder = translations[language][key];
                } else {
                    element.textContent = translations[language][key];
                }
            });
        });
        
        // Update document title
        document.title = translations[language]['site-name'] + ' - ' + translations[language]['hero-subtitle'];
        
        // Update page language attribute
        document.documentElement.lang = language;
        
        // Show notification
        showNotification(`Language changed to ${getLanguageName(language)}`, 'info');
    }
}

function getLanguageName(code) {
    const names = {
        'en': 'English',
        'hi': '‡§π‡§ø‡§Ç‡§¶‡•Ä',
        'mr': '‡§Æ‡§∞‡§æ‡§†‡•Ä', 
        'gu': '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä'
    };
    return names[code] || code;
}

// Community Form Submission
function handleCommunityFormSubmission(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    
    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Sharing...';
    submitBtn.disabled = true;

    // Simulate API call
    setTimeout(() => {
        // Show success message
        showNotification('Thank you for sharing your experience! Your post will be reviewed and published soon.', 'success');
        
        // Reset form
        form.reset();
        
        // Reset button
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }, 2000);
}

// Contact Form Submission
function handleContactFormSubmission(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    
    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Sending...';
    submitBtn.disabled = true;

    // Simulate API call
    setTimeout(() => {
        // Show success message
        showNotification('Thank you for your message! We will get back to you within 24 hours.', 'success');
        
        // Reset form
        form.reset();
        
        // Reset button
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }, 2000);
}

// Feature Buttons Setup
function setupFeatureButtons() {
    document.querySelectorAll('.feature-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const featureTitle = this.closest('.feature-card').querySelector('h3').textContent;
            showFeatureModal(featureTitle);
        });
    });
}

// Scheme Buttons Setup
function setupSchemeButtons() {
    document.querySelectorAll('.scheme-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const schemeTitle = this.closest('.scheme-card').querySelector('h3').textContent;
            showSchemeModal(schemeTitle);
        });
    });
}

// Expert Buttons Setup
function setupExpertButtons() {
    document.querySelectorAll('.expert-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const expertName = this.closest('.expert-card').querySelector('h3').textContent;
            showExpertModal(expertName);
        });
    });
}

// Hero Buttons Setup
function setupHeroButtons() {
    const joinCommunityBtn = document.getElementById('joinCommunityBtn');
    const exploreFeaturesBtn = document.getElementById('exploreFeaturesBtn');
    
    // Join Community Button
    joinCommunityBtn?.addEventListener('click', function() {
        const currentUser = JSON.parse(localStorage.getItem('currentUser') || 'null');
        
        if (!currentUser) {
            // Not logged in - redirect to login
            showNotification('Please login to join our farming community!', 'info');
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 1500);
        } else {
            // Already logged in - redirect to community with notification
            showNotification(`Welcome back, ${currentUser.name.split(' ')[0]}! Ready to share your farming experience?`, 'success');
            setTimeout(() => {
                window.location.href = 'community.html';
                // Set a flag for the community page to show the "share experience" notification
                localStorage.setItem('showShareNotification', 'true');
            }, 1500);
        }
    });
    
    // Explore Features Button
    exploreFeaturesBtn?.addEventListener('click', function() {
        showExploreModal();
    });
}

// Explore Features Modal Functions
function showExploreModal() {
    const modal = document.getElementById('exploreFeaturesModal');
    if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Add event listener for closing modal
        modal.addEventListener('click', function(e) {
            if (e.target === modal || e.target.classList.contains('modal-close')) {
                hideExploreModal();
            }
        });
    }
}

function hideExploreModal() {
    const modal = document.getElementById('exploreFeaturesModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

function navigateToFeature(page) {
    hideExploreModal();
    showNotification('Navigating to ' + page.replace('.html', '') + ' section...', 'info');
    setTimeout(() => {
        window.location.href = page;
    }, 1000);
}

// Add keyboard support for modal
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const modal = document.getElementById('exploreFeaturesModal');
        if (modal && modal.style.display === 'flex') {
            hideExploreModal();
        }
    }
});

// Modal Functions
function showFeatureModal(title) {
    const modal = createModal(
        `${title} - Coming Soon!`,
        `This feature is currently under development. Join our community to get notified when ${title.replace(/üåæ|üèõÔ∏è|üåê|üì≤|üîí/g, '')} becomes available.`,
        [
            { text: 'Join Community', action: () => document.querySelector('#community').scrollIntoView({ behavior: 'smooth' }) },
            { text: 'Close', action: null }
        ]
    );
    document.body.appendChild(modal);
}

function showSchemeModal(title) {
    const schemeInfo = {
        'PM-KISAN Scheme': {
            description: 'The Pradhan Mantri Kisan Samman Nidhi (PM-KISAN) is a Central Sector Scheme launched in 2019 to provide income support to all land holding farmers.',
            benefits: ['‚Çπ6000 per year in 3 equal installments', 'Direct benefit transfer to bank account', 'No income criteria'],
            eligibility: 'All landholding farmers (excluding institutional landholders)',
            documents: ['Aadhaar Card', 'Bank Account Details', 'Land Records']
        },
        'Crop Insurance Scheme': {
            description: 'Pradhan Mantri Fasal Bima Yojana provides financial support to farmers in case of crop failure due to natural calamities.',
            benefits: ['Premium subsidy up to 90%', 'Coverage for all food crops', 'Quick claim settlement'],
            eligibility: 'All farmers including tenant farmers and sharecroppers',
            documents: ['Aadhaar Card', 'Bank Account', 'Sowing Certificate', 'Land Records']
        }
    };

    const info = schemeInfo[title] || {
        description: 'This scheme provides various benefits to farmers. Please contact your nearest agriculture office for detailed information.',
        benefits: ['Various agricultural benefits', 'Financial assistance', 'Technical support'],
        eligibility: 'Eligible farmers as per scheme guidelines',
        documents: ['Required documents as specified']
    };

    const content = `
        <div class="scheme-modal-content">
            <h3>${title}</h3>
            <p>${info.description}</p>
            <h4>Benefits:</h4>
            <ul>${info.benefits.map(b => `<li>${b}</li>`).join('')}</ul>
            <h4>Eligibility:</h4>
            <p>${info.eligibility}</p>
            <h4>Required Documents:</h4>
            <ul>${info.documents.map(d => `<li>${d}</li>`).join('')}</ul>
        </div>
    `;

    const modal = createModal('Scheme Details', content, [
        { text: 'Apply Online', action: () => showNotification('Redirecting to official portal...', 'info') },
        { text: 'Close', action: null }
    ]);
    document.body.appendChild(modal);
}

function showExpertModal(expertName) {
    const modal = createModal(
        `Consult ${expertName}`,
        `Would you like to schedule a consultation with ${expertName}? Our experts are available for video calls and written consultations.`,
        [
            { text: 'Schedule Video Call', action: () => showNotification('Feature coming soon! Please contact us directly.', 'info') },
            { text: 'Written Consultation', action: () => document.querySelector('#contact').scrollIntoView({ behavior: 'smooth' }) },
            { text: 'Close', action: null }
        ]
    );
    document.body.appendChild(modal);
}

// Modal Management Functions
function showModal(modal) {
    if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
}

function hideModal(modal) {
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

// Generic Modal Creator
function createModal(title, content, buttons) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal">
            <div class="modal-header">
                <h2>${title}</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                ${content}
            </div>
            <div class="modal-footer">
                ${buttons.map(btn => `<button class="btn ${btn.text === 'Close' ? 'btn-secondary' : 'btn-primary'}" data-action="${btn.text}">${btn.text}</button>`).join('')}
            </div>
        </div>
    `;

    // Add modal styles
    const style = document.createElement('style');
    style.textContent = `
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            animation: fadeIn 0.3s ease;
        }
        .modal {
            background: white;
            border-radius: 15px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            animation: slideUp 0.3s ease;
        }
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .modal-header h2 {
            color: #1B5E20;
            margin: 0;
        }
        .modal-close {
            background: none;
            border: none;
            font-size: 2rem;
            cursor: pointer;
            color: #666;
        }
        .modal-body {
            padding: 1.5rem;
            color: #333;
        }
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid #eee;
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }
        .scheme-modal-content h4 {
            color: #2E7D32;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
        }
        .scheme-modal-content ul {
            margin-left: 1rem;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideUp {
            from { transform: translateY(30px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);

    // Event listeners
    modal.addEventListener('click', function(e) {
        if (e.target === modal || e.target.classList.contains('modal-close') || e.target.dataset.action === 'Close') {
            document.body.removeChild(modal);
        }
    });

    buttons.forEach(btn => {
        if (btn.action) {
            modal.addEventListener('click', function(e) {
                if (e.target.dataset.action === btn.text) {
                    btn.action();
                    document.body.removeChild(modal);
                }
            });
        }
    });

    return modal;
}

// Notification System
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'times-circle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
        <button class="notification-close">&times;</button>
    `;

    // Add notification styles
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 100px;
                right: 20px;
                background: white;
                border-radius: 10px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                padding: 1rem;
                z-index: 3000;
                animation: slideInRight 0.3s ease;
                max-width: 400px;
                border-left: 4px solid #4CAF50;
            }
            .notification-success {
                border-left-color: #4CAF50;
            }
            .notification-error {
                border-left-color: #f44336;
            }
            .notification-info {
                border-left-color: #2196F3;
            }
            .notification-content {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            .notification-content i {
                color: #4CAF50;
                font-size: 1.2rem;
            }
            .notification-error .notification-content i {
                color: #f44336;
            }
            .notification-info .notification-content i {
                color: #2196F3;
            }
            .notification-close {
                position: absolute;
                top: 5px;
                right: 10px;
                background: none;
                border: none;
                font-size: 1.5rem;
                cursor: pointer;
                color: #666;
            }
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
    }

    document.body.appendChild(notification);

    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideInRight 0.3s ease reverse';
            setTimeout(() => {
                if (notification.parentNode) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }
    }, 5000);

    // Manual close
    notification.querySelector('.notification-close').addEventListener('click', () => {
        if (notification.parentNode) {
            document.body.removeChild(notification);
        }
    });
}

// Animated Counters
function animateCounters() {
    const counters = document.querySelectorAll('.stat h3');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                animateCounter(entry.target);
                observer.unobserve(entry.target);
            }
        });
    });

    counters.forEach(counter => {
        observer.observe(counter);
    });
}

function animateCounter(counter) {
    const target = parseInt(counter.textContent.replace(/[^0-9]/g, ''));
    let current = 0;
    const increment = target / 50;
    const suffix = counter.textContent.replace(/[0-9,]/g, '');

    const timer = setInterval(() => {
        current += increment;
        if (current >= target) {
            counter.textContent = target.toLocaleString() + suffix;
            clearInterval(timer);
        } else {
            counter.textContent = Math.floor(current).toLocaleString() + suffix;
        }
    }, 40);
}

// Scroll Animations
function setupScrollAnimations() {
    const animateElements = document.querySelectorAll('.feature-card, .scheme-card, .expert-card, .stat');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, { threshold: 0.1 });

    animateElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
}

// Typing Effect for Hero Title
function addTypingEffect() {
    const heroTitle = document.querySelector('.hero-content h1');
    if (heroTitle) {
        const text = heroTitle.textContent;
        heroTitle.textContent = '';
        
        let i = 0;
        const typeWriter = () => {
            if (i < text.length) {
                heroTitle.textContent += text.charAt(i);
                i++;
                setTimeout(typeWriter, 100);
            }
        };
        
        // Start typing effect after a short delay
        setTimeout(typeWriter, 1000);
    }
}

// ===== SOCIAL PLATFORM FEATURES =====

// Global state management
let currentUser = null;
let posts = [];
let conversations = [];
let currentConversation = null;
let mediaFiles = [];

// Initialize social platform features
function initializeSocialPlatform() {
    initializeAuth();
    initializePostCreation();
    initializeMessaging();
    loadSampleData();
    setupEventListeners();
}

// Authentication System
function initializeAuth() {
    // Check if user is already logged in
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        updateUIForLoggedInUser();
    }
    
    // Logout
    document.getElementById('logoutBtn')?.addEventListener('click', handleLogout);
}


function handleLogout() {
    currentUser = null;
    localStorage.removeItem('currentUser');
    updateUIForLoggedOutUser();
    showNotification('Successfully logged out. See you soon!', 'info');
}

function updateUIForLoggedInUser() {
    document.getElementById('userActions').style.display = 'none';
    document.getElementById('userProfile').style.display = 'flex';
    document.getElementById('currentUsername').textContent = currentUser.name.split(' ')[0];
    
    // Enable post creation
    document.getElementById('createPostBtn').style.display = 'block';
    
    // Show messages in navigation
    showMessagesSection();
}

function updateUIForLoggedOutUser() {
    document.getElementById('userActions').style.display = 'flex';
    document.getElementById('userProfile').style.display = 'none';
    
    // Hide post creation
    document.getElementById('createPostSection').style.display = 'none';
    document.getElementById('createPostBtn').style.display = 'none';
    
    // Hide messages
    hideMessagesSection();
}

// Post Creation System
function initializePostCreation() {
    const createPostBtn = document.getElementById('createPostBtn');
    const createPostSection = document.getElementById('createPostSection');
    const createPostForm = document.getElementById('createPostForm');
    const cancelPostBtn = document.getElementById('cancelPost');
    const mediaInput = document.getElementById('mediaInput');
    const uploadArea = document.getElementById('uploadArea');
    
    createPostBtn?.addEventListener('click', () => {
        if (!currentUser) {
            showNotification('Please login to share your experience!', 'info');
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 1000);
            return;
        }
        createPostSection.style.display = createPostSection.style.display === 'none' ? 'block' : 'none';
    });
    
    cancelPostBtn?.addEventListener('click', () => {
        createPostSection.style.display = 'none';
        createPostForm.reset();
        clearMediaPreview();
    });
    
    createPostForm?.addEventListener('submit', handlePostSubmission);
    
    // Media upload handling
    mediaInput?.addEventListener('change', handleMediaUpload);
    
    // Drag and drop functionality
    uploadArea?.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.style.background = '#F1F8E9';
    });
    
    uploadArea?.addEventListener('dragleave', () => {
        uploadArea.style.background = '';
    });
    
    uploadArea?.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.style.background = '';
        const files = Array.from(e.dataTransfer.files);
        handleMediaFiles(files);
    });
    
    uploadArea?.addEventListener('click', () => {
        mediaInput.click();
    });
}

function handleMediaUpload(e) {
    const files = Array.from(e.target.files);
    handleMediaFiles(files);
}

function handleMediaFiles(files) {
    files.forEach(file => {
        if (file.type.startsWith('image/') || file.type.startsWith('video/')) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const mediaItem = {
                    id: generateId(),
                    file: file,
                    url: e.target.result,
                    type: file.type.startsWith('image/') ? 'image' : 'video'
                };
                mediaFiles.push(mediaItem);
                addMediaPreview(mediaItem);
            };
            reader.readAsDataURL(file);
        }
    });
}

function addMediaPreview(mediaItem) {
    const mediaPreview = document.getElementById('mediaPreview');
    const mediaElement = document.createElement('div');
    mediaElement.className = 'media-item';
    mediaElement.innerHTML = `
        ${mediaItem.type === 'image' 
            ? `<img src="${mediaItem.url}" alt="Preview">` 
            : `<video src="${mediaItem.url}" controls></video>`
        }
        <button class="media-remove" onclick="removeMediaItem('${mediaItem.id}')">&times;</button>
    `;
    mediaPreview.appendChild(mediaElement);
}

function removeMediaItem(itemId) {
    mediaFiles = mediaFiles.filter(item => item.id !== itemId);
    const mediaPreview = document.getElementById('mediaPreview');
    const mediaItems = mediaPreview.querySelectorAll('.media-item');
    mediaItems.forEach(item => {
        const button = item.querySelector('.media-remove');
        if (button && button.getAttribute('onclick').includes(itemId)) {
            item.remove();
        }
    });
}

function clearMediaPreview() {
    mediaFiles = [];
    document.getElementById('mediaPreview').innerHTML = '';
}

function handlePostSubmission(e) {
    e.preventDefault();
    
    const title = document.getElementById('postTitle').value;
    const description = document.getElementById('postDescription').value;
    const category = document.getElementById('postCategory').value;
    
    const newPost = {
        id: generateId(),
        author: currentUser,
        title,
        description,
        category,
        media: [...mediaFiles],
        timestamp: new Date().toISOString(),
        likes: Math.floor(Math.random() * 50),
        comments: Math.floor(Math.random() * 20),
        shares: Math.floor(Math.random() * 10),
        trending: Math.random() > 0.7
    };
    
    posts.unshift(newPost);
    localStorage.setItem('posts', JSON.stringify(posts));
    
    // Reset form
    e.target.reset();
    clearMediaPreview();
    document.getElementById('createPostSection').style.display = 'none';
    
    // Refresh posts display
    displayPosts();
    displayTrendingPosts();
    
    showNotification('Your post has been shared successfully!', 'success');
}

// Posts Display System
function displayPosts() {
    const postsFeed = document.getElementById('postsFeed');
    if (!postsFeed) return;
    
    postsFeed.innerHTML = '';
    
    posts.forEach(post => {
        const postElement = createPostElement(post);
        postsFeed.appendChild(postElement);
    });
}

function createPostElement(post) {
    const postDiv = document.createElement('div');
    postDiv.className = 'post-card';
    
    const mediaHtml = post.media.length > 0 ? `
        <div class="post-media">
            ${post.media.map(media => 
                media.type === 'image' 
                    ? `<img src="${media.url}" alt="Post media" onclick="openMediaModal('${media.url}', 'image')">` 
                    : `<video src="${media.url}" controls></video>`
            ).join('')}
        </div>
    ` : '';
    
    postDiv.innerHTML = `
        <div class="post-header">
            <div class="post-avatar">${post.author.avatar}</div>
            <div class="post-user-info">
                <h4>${post.author.name}</h4>
                <div class="post-meta">${post.author.location} ‚Ä¢ ${timeAgo(post.timestamp)}</div>
            </div>
            <div class="post-category">${getCategoryName(post.category)}</div>
        </div>
        <div class="post-content">
            <h3 class="post-title">${post.title}</h3>
            <p class="post-description">${post.description}</p>
            ${mediaHtml}
        </div>
        <div class="post-actions">
            <button class="action-btn" onclick="togglePostLike('${post.id}')">
                <i class="fas fa-heart"></i>
                <span class="action-count">${post.likes}</span>
            </button>
            <button class="action-btn" onclick="openCommentsModal('${post.id}')">
                <i class="fas fa-comment"></i>
                <span class="action-count">${post.comments}</span>
            </button>
            <button class="action-btn" onclick="sharePost('${post.id}')">
                <i class="fas fa-share"></i>
                <span class="action-count">${post.shares}</span>
            </button>
            <button class="action-btn" onclick="startConversationWithAuthor('${post.author.id}')">
                <i class="fas fa-message"></i>
                <span>Message</span>
            </button>
        </div>
    `;
    
    return postDiv;
}

// Trending System
function displayTrendingPosts() {
    const trendingContainer = document.getElementById('trendingPosts');
    if (!trendingContainer) return;
    
    const trendingPosts = posts.filter(post => post.trending || post.likes > 30).slice(0, 6);
    
    trendingContainer.innerHTML = '';
    
    trendingPosts.forEach(post => {
        const trendingElement = document.createElement('div');
        trendingElement.className = 'trending-post';
        trendingElement.innerHTML = `
            <h4>${post.title}</h4>
            <p>${post.description.substring(0, 100)}...</p>
            <div class="trending-stats">
                <span><i class="fas fa-heart"></i> ${post.likes}</span>
                <span><i class="fas fa-comment"></i> ${post.comments}</span>
                <span class="trending-badge">Trending</span>
            </div>
        `;
        trendingElement.addEventListener('click', () => scrollToPost(post.id));
        trendingContainer.appendChild(trendingElement);
    });
    
    // Setup trending tabs
    setupTrendingTabs();
}

function setupTrendingTabs() {
    const tabs = document.querySelectorAll('.tab-btn');
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active class from all tabs
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // Filter posts by category
            const category = tab.getAttribute('data-category');
            filterTrendingPosts(category);
        });
    });
}

function filterTrendingPosts(category) {
    const trendingContainer = document.getElementById('trendingPosts');
    let filteredPosts;
    
    if (category === 'all') {
        filteredPosts = posts.filter(post => post.trending || post.likes > 30);
    } else {
        filteredPosts = posts.filter(post => post.category === category && (post.trending || post.likes > 20));
    }
    
    trendingContainer.innerHTML = '';
    
    filteredPosts.slice(0, 6).forEach(post => {
        const trendingElement = document.createElement('div');
        trendingElement.className = 'trending-post';
        trendingElement.innerHTML = `
            <h4>${post.title}</h4>
            <p>${post.description.substring(0, 100)}...</p>
            <div class="trending-stats">
                <span><i class="fas fa-heart"></i> ${post.likes}</span>
                <span><i class="fas fa-comment"></i> ${post.comments}</span>
                <span class="trending-badge">${getCategoryName(category)}</span>
            </div>
        `;
        trendingElement.addEventListener('click', () => scrollToPost(post.id));
        trendingContainer.appendChild(trendingElement);
    });
}

// Messaging System
function initializeMessaging() {
    const newMessageBtn = document.getElementById('newMessageBtn');
    const newMessageModal = document.getElementById('newMessageModal');
    const messageInput = document.getElementById('messageInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    
    newMessageBtn?.addEventListener('click', () => {
        if (!currentUser) {
            showNotification('Please login to send messages!', 'info');
            return;
        }
        showModal(newMessageModal);
    loadUsersForMessaging();
    });
    
    messageInput?.addEventListener('input', (e) => {
        sendMessageBtn.disabled = e.target.value.trim() === '';
    });
    
    sendMessageBtn?.addEventListener('click', sendMessage);
    
    // Setup message navigation
    document.querySelectorAll('.message-expert').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const expertId = e.target.getAttribute('data-expert');
            if (!currentUser) {
                showNotification('Please login to message experts!', 'info');
                setTimeout(() => {
                    window.location.href = 'login.html';
                }, 1000);
                return;
            }
            startConversationWithExpert(expertId);
        });
    });
}

// Utility Functions
function generateId() {
    return 'id_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function timeAgo(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffInHours = Math.floor((now - time) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return 'Just now';
    if (diffInHours < 24) return `${diffInHours}h ago`;
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays}d ago`;
    return time.toLocaleDateString();
}

function getCategoryName(category) {
    const categories = {
        'crop-tips': 'Crop Tips',
        'pest-control': 'Pest Control', 
        'irrigation': 'Irrigation',
        'fertilizer': 'Fertilizer',
        'weather': 'Weather & Climate',
        'equipment': 'Equipment & Tools',
        'market-price': 'Market Prices',
        'success-story': 'Success Story',
        'question': 'Question/Help'
    };
    return categories[category] || category;
}

// Messages Section Management
function showMessagesSection() {
    const messagesSection = document.getElementById('messages');
    const messagesLink = document.querySelector('a[href="#messages"]');
    if (messagesSection && messagesLink) {
        messagesSection.style.display = 'block';
        messagesLink.parentElement.style.display = 'block';
    }
}

function hideMessagesSection() {
    const messagesSection = document.getElementById('messages');
    const messagesLink = document.querySelector('a[href="#messages"]');
    if (messagesSection && messagesLink) {
        messagesSection.style.display = 'none';
        messagesLink.parentElement.style.display = 'none';
    }
}

// Sample data loading
function loadSampleData() {
    // Load sample posts if none exist
    if (posts.length === 0) {
        posts = [
            {
                id: 'post_1',
                author: {
                    id: 'farmer_1',
                    name: 'Ramesh Sharma',
                    location: 'Punjab, India',
                    avatar: 'R'
                },
                title: 'Successful Organic Rice Farming Techniques',
                description: 'I have been practicing organic rice farming for the past 5 years. Here are the key techniques that have helped me increase yield by 30% while reducing costs.',
                category: 'success-story',
                media: [],
                timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
                likes: 45,
                comments: 12,
                shares: 8,
                trending: true
            },
            {
                id: 'post_2',
                author: {
                    id: 'farmer_2',
                    name: 'Sunita Patel',
                    location: 'Gujarat, India',
                    avatar: 'S'
                },
                title: 'How to Control Cotton Bollworm Naturally',
                description: 'Share your experiences with natural pest control methods. I have found neem oil spray to be very effective.',
                category: 'pest-control',
                media: [],
                timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
                likes: 32,
                comments: 18,
                shares: 5,
                trending: true
            },
            {
                id: 'post_3',
                author: {
                    id: 'farmer_3',
                    name: 'Anil Kumar',
                    location: 'Maharashtra, India',
                    avatar: 'A'
                },
                title: 'Water-Efficient Drip Irrigation Setup',
                description: 'Installed drip irrigation system last season. Sharing my experience and cost breakdown for other farmers.',
                category: 'irrigation',
                media: [],
                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
                likes: 28,
                comments: 9,
                shares: 6,
                trending: false
            }
        ];
        displayPosts();
        displayTrendingPosts();
    }
}

// Social interaction functions
function togglePostLike(postId) {
    if (!currentUser) {
        showNotification('Please login to like posts!', 'info');
        return;
    }
    
    const post = posts.find(p => p.id === postId);
    if (post) {
        post.likes += 1;
        displayPosts();
        displayTrendingPosts();
        showNotification('Post liked!', 'success');
    }
}

function openCommentsModal(postId) {
    showNotification('Comments feature coming soon!', 'info');
}

function sharePost(postId) {
    if (!currentUser) {
        showNotification('Please login to share posts!', 'info');
        return;
    }
    
    const post = posts.find(p => p.id === postId);
    if (post) {
        post.shares += 1;
        displayPosts();
        displayTrendingPosts();
        showNotification('Post shared!', 'success');
    }
}

function scrollToPost(postId) {
    const feedSection = document.getElementById('feed');
    if (feedSection) {
        feedSection.scrollIntoView({ behavior: 'smooth' });
    }
}

function startConversationWithAuthor(authorId) {
    if (!currentUser) {
        showNotification('Please login to send messages!', 'info');
        return;
    }
    showNotification('Direct messaging feature coming soon!', 'info');
}

function startConversationWithExpert(expertId) {
    if (!currentUser) {
        showNotification('Please login to message experts!', 'info');
        return;
    }
    
    // Switch to messages section
    showMessagesSection();
    document.getElementById('messages').scrollIntoView({ behavior: 'smooth' });
    showNotification('Expert messaging feature coming soon!', 'info');
}

function loadUsersForMessaging() {
    // This would load actual users in a real application
    showNotification('User search feature coming soon!', 'info');
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (message) {
        showNotification('Message sent!', 'success');
        messageInput.value = '';
        document.getElementById('sendMessageBtn').disabled = true;
    }
}

function openMediaModal(url, type) {
    const modal = createModal(
        'Media Viewer',
        type === 'image' 
            ? `<img src="${url}" style="max-width: 100%; height: auto;">` 
            : `<video src="${url}" controls style="max-width: 100%;">`,
        [{ text: 'Close', action: null }]
    );
    document.body.appendChild(modal);
}

// Event Listeners Setup
function setupEventListeners() {
    // Navigation active state on scroll
    window.addEventListener('scroll', updateActiveNavLink);
    
    // Messages link click handler
    const messagesNavLink = document.querySelector('a[href="#messages"]');
    if (messagesNavLink) {
        messagesNavLink.addEventListener('click', (e) => {
            if (!currentUser) {
                e.preventDefault();
                showNotification('Please login to access messages!', 'info');
                setTimeout(() => {
                    window.location.href = 'login.html';
                }, 1000);
                return;
            }
            
            const messagesSection = document.getElementById('messages');
            if (messagesSection) {
                messagesSection.style.display = 'block';
            }
        });
    }
}

function updateActiveNavLink() {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    let current = '';
    sections.forEach(section => {
        const sectionTop = section.offsetTop;
        if (window.pageYOffset >= (sectionTop - 150)) {
            current = section.getAttribute('id');
        }
    });
    
    navLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href').slice(1) === current) {
            link.classList.add('active');
        }
    });
    };
    
    messageInput?.addEventListener('input', (e) => {
        sendMessageBtn.disabled = e.target.value.trim() === '';
    });
    
    sendMessageBtn?.addEventListener('click', sendMessage);
    
    messageInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !sendMessageBtn.disabled) {
            sendMessage();
        }
    });
    
    // Setup expert messaging
    document.querySelectorAll('.message-expert').forEach(btn => {
        btn.addEventListener('click', (e) => {
            if (!currentUser) {
                showNotification('Please login to message experts!', 'info');
                return;
            }
            const expertId = e.target.getAttribute('data-expert');
            startConversationWithExpert(expertId);
        });
    });


function showMessagesSection() {
    const messagesLink = document.querySelector('a[href="#messages"]');
    if (messagesLink) {
        messagesLink.parentElement.style.display = 'block';
    }
}

function hideMessagesSection() {
    const messagesLink = document.querySelector('a[href="#messages"]');
    if (messagesLink) {
        messagesLink.parentElement.style.display = 'none';
    }
    document.getElementById('messages').style.display = 'none';
}

function loadUsersForMessaging() {
    const searchResults = document.getElementById('searchResults');
    const sampleUsers = [
        { id: 'dr-rajesh', name: 'Dr. Rajesh Kumar', type: 'expert', specialization: 'Soil Science' },
        { id: 'dr-priya', name: 'Dr. Priya Sharma', type: 'expert', specialization: 'Crop Protection' },
        { id: 'dr-arun', name: 'Dr. Arun Patel', type: 'expert', specialization: 'Horticulture' },
        { id: 'farmer1', name: 'Ramesh Patil', type: 'farmer', location: 'Maharashtra' },
        { id: 'farmer2', name: 'Suresh Kumar', type: 'farmer', location: 'Punjab' },
        { id: 'farmer3', name: 'Lakshmi Devi', type: 'farmer', location: 'Karnataka' }
    ];
    
    searchResults.innerHTML = '';
    
    sampleUsers.forEach(user => {
        const userElement = document.createElement('div');
        userElement.className = 'search-result-item';
        userElement.innerHTML = `
            <div class="user-avatar">${user.name.charAt(0)}</div>
            <div class="user-info">
                <h4>${user.name}</h4>
                <p>${user.type === 'expert' ? user.specialization : user.location}</p>
            </div>
        `;
        userElement.addEventListener('click', () => {
            startConversation(user);
            hideModal(document.getElementById('newMessageModal'));
        });
        searchResults.appendChild(userElement);
    });
}

function startConversation(user) {
    // Find existing conversation or create new one
    let conversation = conversations.find(conv => 
        conv.participants.some(p => p.id === user.id)
    );
    
    if (!conversation) {
        conversation = {
            id: generateId(),
            participants: [currentUser, user],
            messages: [],
            lastMessage: null,
            timestamp: new Date().toISOString()
        };
        conversations.push(conversation);
    }
    
    openConversation(conversation);
    
    // Show messages section
    document.getElementById('messages').style.display = 'block';
    setTimeout(() => {
        document.getElementById('messages').scrollIntoView({ behavior: 'smooth' });
    }, 100);
}

function startConversationWithExpert(expertId) {
    const experts = {
        'dr-rajesh': { id: 'dr-rajesh', name: 'Dr. Rajesh Kumar', type: 'expert', specialization: 'Soil Science' },
        'dr-priya': { id: 'dr-priya', name: 'Dr. Priya Sharma', type: 'expert', specialization: 'Crop Protection' },
        'dr-arun': { id: 'dr-arun', name: 'Dr. Arun Patel', type: 'expert', specialization: 'Horticulture' }
    };
    
    const expert = experts[expertId];
    if (expert) {
        startConversation(expert);
    }
}

function startConversationWithAuthor(authorId) {
    if (!currentUser) {
        showNotification('Please login to send messages!', 'info');
        return;
    }
    
    const post = posts.find(p => p.author.id === authorId);
    if (post) {
        startConversation(post.author);
    }
}

function openConversation(conversation) {
    currentConversation = conversation;
    
    // Update conversations sidebar
    updateConversationsList();
    
    // Update chat header
    const otherParticipant = conversation.participants.find(p => p.id !== currentUser.id);
    document.getElementById('chatUserName').textContent = otherParticipant.name;
    document.getElementById('chatUserStatus').textContent = 'Online';
    
    // Display messages
    displayMessages(conversation.messages);
    
    // Show message input
    document.getElementById('messageInputArea').style.display = 'flex';
    
    // Hide no conversation message
    document.querySelector('.no-conversation').style.display = 'none';
}

function updateConversationsList() {
    const conversationsList = document.getElementById('conversationsList');
    conversationsList.innerHTML = '';
    
    conversations.forEach(conversation => {
        const otherParticipant = conversation.participants.find(p => p.id !== currentUser.id);
        const lastMessage = conversation.messages[conversation.messages.length - 1];
        
        const conversationElement = document.createElement('div');
        conversationElement.className = 'conversation-item';
        if (currentConversation && currentConversation.id === conversation.id) {
            conversationElement.classList.add('active');
        }
        
        conversationElement.innerHTML = `
            <div class="conversation-avatar">${otherParticipant.name.charAt(0)}</div>
            <div class="conversation-info">
                <h4>${otherParticipant.name}</h4>
                <p class="conversation-preview">${lastMessage ? lastMessage.content : 'Start a conversation...'}</p>
            </div>
            <div class="conversation-time">${lastMessage ? timeAgo(lastMessage.timestamp) : 'now'}</div>
        `;
        
        conversationElement.addEventListener('click', () => openConversation(conversation));
        conversationsList.appendChild(conversationElement);
    });
}

function displayMessages(messages) {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.innerHTML = '';
    
    messages.forEach(message => {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${message.senderId === currentUser.id ? 'sent' : 'received'}`;
        messageElement.innerHTML = `
            <div class="message-content">${message.content}</div>
            <div class="message-time">${formatTime(message.timestamp)}</div>
        `;
        messagesContainer.appendChild(messageElement);
    });
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const content = messageInput.value.trim();
    
    if (!content || !currentConversation) return;
    
    const message = {
        id: generateId(),
        senderId: currentUser.id,
        content,
        timestamp: new Date().toISOString()
    };
    
    currentConversation.messages.push(message);
    currentConversation.lastMessage = message;
    currentConversation.timestamp = message.timestamp;
    
    // Save conversations
    localStorage.setItem('conversations', JSON.stringify(conversations));
    
    // Update UI
    displayMessages(currentConversation.messages);
    updateConversationsList();
    
    // Clear input
    messageInput.value = '';
    document.getElementById('sendMessageBtn').disabled = true;
    
    // Simulate response (in real app, this would come from the other user)
    setTimeout(() => {
        simulateResponse();
    }, 2000 + Math.random() * 3000);
}

function simulateResponse() {
    if (!currentConversation) return;
    
    const otherParticipant = currentConversation.participants.find(p => p.id !== currentUser.id);
    const responses = [
        "Thank you for reaching out! How can I help you?",
        "That's a great question about farming practices.",
        "I'd be happy to share my experience with that crop.",
        "Have you tried organic methods for this issue?",
        "This is a common problem in our region. Here's what I recommend...",
        "Let me share some resources that might help you."
    ];
    
    const response = {
        id: generateId(),
        senderId: otherParticipant.id,
        content: responses[Math.floor(Math.random() * responses.length)],
        timestamp: new Date().toISOString()
    };
    
    currentConversation.messages.push(response);
    currentConversation.lastMessage = response;
    currentConversation.timestamp = response.timestamp;
    
    // Update UI
    displayMessages(currentConversation.messages);
    updateConversationsList();
    
    // Save conversations
    localStorage.setItem('conversations', JSON.stringify(conversations));
}

// Data Management
function loadSampleData() {
    // Load saved posts
    const savedPosts = localStorage.getItem('posts');
    if (savedPosts) {
        posts = JSON.parse(savedPosts);
    } else {
        // Create sample posts
        posts = createSamplePosts();
        localStorage.setItem('posts', JSON.stringify(posts));
    }
    
    // Load saved conversations
    const savedConversations = localStorage.getItem('conversations');
    if (savedConversations) {
        conversations = JSON.parse(savedConversations);
    }
    
    // Display posts
    displayPosts();
    displayTrendingPosts();
    
    // Update conversations if user is logged in
    if (currentUser) {
        updateConversationsList();
    }
}

function createSamplePosts() {
    return [
        {
            id: 'post1',
            author: { id: 'farmer1', name: 'Ramesh Patil', location: 'Maharashtra, India', avatar: 'R' },
            title: 'Successful Organic Cotton Farming Method',
            description: 'After 3 years of trial, I have developed a completely organic method for cotton farming that increased my yield by 40% while reducing costs by 25%. Happy to share details!',
            category: 'success-story',
            media: [],
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
            likes: 45,
            comments: 23,
            shares: 12,
            trending: true
        },
        {
            id: 'post2',
            author: { id: 'farmer2', name: 'Lakshmi Devi', location: 'Karnataka, India', avatar: 'L' },
            title: 'Effective Solution for Aphid Control',
            description: 'Discovered an effective natural spray made from neem oil and soap solution that completely eliminated aphids from my tomato crop. Recipe in comments!',
            category: 'pest-control',
            media: [],
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
            likes: 38,
            comments: 17,
            shares: 8,
            trending: true
        },
        {
            id: 'post3',
            author: { id: 'farmer3', name: 'Suresh Kumar', location: 'Punjab, India', avatar: 'S' },
            title: 'Drip Irrigation Setup for Small Farms',
            description: 'Successfully installed a low-cost drip irrigation system for my 2-acre farm. Water usage reduced by 60% and yield improved. Sharing the complete setup guide.',
            category: 'irrigation',
            media: [],
            timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
            likes: 52,
            comments: 31,
            shares: 19,
            trending: true
        }
    ];
}

// Event Listeners Setup
function setupEventListeners() {
    // Navigation for messages
    document.querySelector('a[href="#messages"]')?.addEventListener('click', (e) => {
        e.preventDefault();
        if (!currentUser) {
            showNotification('Please login to access messages!', 'info');
            return;
        }
        showMessagesSection();
        document.getElementById('messages').style.display = 'block';
        setTimeout(() => {
            document.getElementById('messages').scrollIntoView({ behavior: 'smooth' });
        }, 100);
    });
    
    // Join community button in hero
    document.querySelector('.join-community-btn')?.addEventListener('click', () => {
        if (!currentUser) {
            showModal(document.getElementById('signupModal'));
        } else {
            document.getElementById('feed').scrollIntoView({ behavior: 'smooth' });
        }
    });
}

// Utility Functions
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

function timeAgo(timestamp) {
    const now = new Date();
    const past = new Date(timestamp);
    const diffInSeconds = Math.floor((now - past) / 1000);
    
    if (diffInSeconds < 60) return 'just now';
    if (diffInSeconds < 3600) return Math.floor(diffInSeconds / 60) + ' minutes ago';
    if (diffInSeconds < 86400) return Math.floor(diffInSeconds / 3600) + ' hours ago';
    if (diffInSeconds < 604800) return Math.floor(diffInSeconds / 86400) + ' days ago';
    
    return past.toLocaleDateString();
}

function formatTime(timestamp) {
    return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

function getCategoryName(category) {
    const categories = {
        'crop-tips': 'Crop Tips',
        'pest-control': 'Pest Control',
        'irrigation': 'Irrigation',
        'fertilizer': 'Fertilizer',
        'weather': 'Weather',
        'equipment': 'Equipment',
        'market-price': 'Market Price',
        'success-story': 'Success Story',
        'question': 'Question'
    };
    return categories[category] || category;
}

function showModal(modal) {
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function hideModal(modal) {
    modal.style.display = 'none';
    document.body.style.overflow = '';
}

// Post Interaction Functions
function togglePostLike(postId) {
    const post = posts.find(p => p.id === postId);
    if (post) {
        post.likes += Math.random() > 0.5 ? 1 : -1;
        post.likes = Math.max(0, post.likes);
        localStorage.setItem('posts', JSON.stringify(posts));
        displayPosts();
        displayTrendingPosts();
    }
}

function sharePost(postId) {
    const post = posts.find(p => p.id === postId);
    if (post) {
        post.shares += 1;
        localStorage.setItem('posts', JSON.stringify(posts));
        displayPosts();
        showNotification('Post shared successfully!', 'success');
    }
}

function openCommentsModal(postId) {
    showNotification('Comments feature coming soon!', 'info');
}

function openMediaModal(url, type) {
    // Create a simple media modal
    const modal = createModal(
        'Media View',
        type === 'image' 
            ? `<img src="${url}" style="max-width: 100%; height: auto; border-radius: 8px;">` 
            : `<video src="${url}" controls style="max-width: 100%; height: auto; border-radius: 8px;"></video>`,
        [{ text: 'Close', action: null }]
    );
    document.body.appendChild(modal);
}

function scrollToPost(postId) {
    document.getElementById('feed').scrollIntoView({ behavior: 'smooth' });
}
